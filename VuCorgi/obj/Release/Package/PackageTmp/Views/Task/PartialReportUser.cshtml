@model MainLibrary.Entity.WebCenter.TaskReportUser[]



<div class="row">
    <article class="col-sm-12">
        <div class="navbar navbar-inverse">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-2">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-2">
                <div class="navbar-form" role="search">
                    <div>
                        <table class="table table-striped table-bordered table-hover" width="100%">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Total Task</th>
                                    <th>Total Finished</th>
                                    <th>Total Not Finished</th>
                                    <th>Maximum Bonus</th>
                                    <th>Real Bonus</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var item in Model)
                                {
                                    <tr>
                                        <td>@item.Date</td>
                                        <td>@item.TotalTask</td>
                                        <td>@item.TotalFinished</td>
                                        <td>@item.TotalNotFinished</td>
                                        <td>@item.MaximumBonus</td>
                                        <td>@item.RealBonus</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div><!-- /.navbar-collapse -->
        </div>
    </article>
</div>

<section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false">
                <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"

                -->
                <header>
                    <h2>Total Task Completed</h2>
                </header>
                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                        <input class="form-control" type="text">
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body">
                        <!-- this is what the user will see -->
                        <canvas id="lineChart" height="120"></canvas>
                    </div>
                    <!-- end widget content -->
                </div>
                <!-- end widget div -->
            </div>
            <!-- end widget -->
        </article>
    </div>
</section>


<section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-custombutton="false">
                <!-- widget options:
                    usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">

                    data-widget-colorbutton="false"
                    data-widget-editbutton="false"
                    data-widget-togglebutton="false"
                    data-widget-deletebutton="false"
                    data-widget-fullscreenbutton="false"
                    data-widget-custombutton="false"
                    data-widget-collapsed="true"
                    data-widget-sortable="false"

                -->
                <header>
                    <h2>Bonus Money</h2>
                </header>
                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                        <input class="form-control" type="text">
                    </div>
                    <!-- end widget edit box -->
                    <!-- widget content -->
                    <div class="widget-body">
                        <!-- this is what the user will see -->
                        <canvas id="lineChart2" height="120"></canvas>
                    </div>
                    <!-- end widget content -->
                </div>
                <!-- end widget div -->
            </div>
            <!-- end widget -->
        </article>
    </div>
</section>

<script>
        var arrTimeLine = @(Html.Raw(Json.Encode(Model.Select(c=>c.Date).ToArray())));
        var arrValue1 =  @(Html.Raw(Json.Encode(Model.Select(c=>c.TotalTask).ToArray())));
        var arrValue2 =  @(Html.Raw(Json.Encode(Model.Select(c=>c.TotalFinished).ToArray())));
        var arrValue3 =  @(Html.Raw(Json.Encode(Model.Select(c=>c.MaximumBonus).ToArray())));
        var arrValue4 =  @(Html.Raw(Json.Encode(Model.Select(c=>c.RealBonus).ToArray())));
        /* DO NOT REMOVE : GLOBAL FUNCTIONS!
            *
            * pageSetUp(); WILL CALL THE FOLLOWING FUNCTIONS
            *
            * // activate tooltips
            * $("[rel=tooltip]").tooltip();
            *
            * // activate popovers
            * $("[rel=popover]").popover();
            *
            * // activate popovers with hover states
            * $("[rel=popover-hover]").popover({ trigger: "hover" });
            *
            * // activate inline charts
            * runAllCharts();
            *
            * // setup widgets
            * setup_widgets_desktop();
            *
            * // run form elements
            * runAllForms();
            *
            ********************************
            *
            * pageSetUp() is needed whenever you load a page.
            * It initializes and checks for all basic elements of the page
            * and makes rendering easier.
            *
            */

        pageSetUp();

        /*
         * ALL PAGE RELATED SCRIPTS CAN GO BELOW HERE
         * eg alert("my home function");
         *
         * var pagefunction = function() {
         *   ...
         * }
         * loadScript("js/plugin/_PLUGIN_NAME_.js", pagefunction);
         *
         * TO LOAD A SCRIPT:
         * var pagefunction = function (){
         *  loadScript(".../plugin.js", run_after_loaded);
         * }
         *
         * OR
         *
         * loadScript(".../plugin.js", run_after_loaded);
         */

        // reference: http://www.chartjs.org/docs/

        // LINE CHART
        // ref: http://www.chartjs.org/docs/#line-chart-introduction
        var lineOptions = {
            ///Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: true,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether the line is curved between points
            bezierCurve: true,
            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.4,
            //Boolean - Whether to show a dot for each point
            pointDot: true,
            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            //Boolean - Whether to fill the dataset with a colour
            datasetFill: true,
            //Boolean - Re-draw chart on page resize
            responsive: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
        };

        var lineData = {
            labels: arrTimeLine,
            datasets: [
                {
                    label: "My First dataset",
                    fillColor: "rgba(220,220,220,0.2)",
                    strokeColor: "rgba(220,220,220,1)",
                    pointColor: "rgba(220,220,220,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(220,220,220,1)",
                    data: arrValue1
                },
                {
                    label: "My Second dataset",
                    fillColor: "rgba(151,187,205,0.2)",
                    strokeColor: "rgba(151,187,205,1)",
                    pointColor: "rgba(151,187,205,1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba(151,187,205,1)",
                    data: arrValue2
                }
            ]
        };

        // render chart
        var ctx = document.getElementById("lineChart").getContext("2d");
        var myNewChart = new Chart(ctx).Line(lineData, lineOptions);

    var lineData2 = {
        labels: arrTimeLine,
        datasets: [
            {
                label: "My First dataset",
                fillColor: "rgba(220,220,220,0.2)",
                strokeColor: "rgba(220,220,220,1)",
                pointColor: "rgba(220,220,220,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(220,220,220,1)",
                data: arrValue3
            },
            {
                label: "My Second dataset",
                fillColor: "rgba(151,187,205,0.2)",
                strokeColor: "rgba(151,187,205,1)",
                pointColor: "rgba(151,187,205,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(151,187,205,1)",
                data: arrValue4
            }
        ]
    };
    // render chart
    var ctx2 = document.getElementById("lineChart2").getContext("2d");
    var myNewChart2 = new Chart(ctx2).Line(lineData2, lineOptions);
            // END LINE CHART
</script>
